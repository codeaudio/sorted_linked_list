class Node:
    def __init__(self, value, left=None, right=None):
        self.left = left
        self.right = right
        self.value = value
        self.center = None
        self.prev = None


class SortedLinkedList:
    def __init__(self):
        self.head = None

    def add(self, element):
        if self.head is None:
            self.head = Node(element)
        else:
            if (self.head.right and self.head.left) is None:
                new_node = Node(element)
                if element < self.head.value:
                    new_node.right = self.head
                    self.head = new_node
                    new_node.right.prev = self.head
                elif element > self.head.value:
                    new_node.left = self.head
                    self.head = new_node
                    new_node.left.prev = self.head
                else:
                    new_node.center = self.head
                    self.head = new_node
                    new_node.center.prev = self.head

    @staticmethod
    def all_node(head, position='', position_multiplier=15):
        if position == 'center':
            print(position_multiplier * '  ' + str(head.value) + '  ' * position_multiplier)
        elif head.right is not None:
            if position == 'right':
                position_multiplier += 1
                print(position_multiplier * '  ' + str(head.value))
            else:
                position_multiplier -= 1
                print(position_multiplier * '  ' + str(head.value) + '  ' * position_multiplier)
        elif head.left is not None:
            if position == 'left':
                position_multiplier -= 1
                print(position_multiplier * '  ' + str(head.value) + '  ' * position_multiplier)
            else:
                position_multiplier += 1
                print(position_multiplier * '  ' + str(head.value))
        else:
            if head.prev and head.prev.value > head.value:
                print((position_multiplier - 1) * '  ' + str(head.value) + '  ' * position_multiplier)
            elif head.prev and head.prev.value < head.value:
                print((position_multiplier + 1) * '  ' + str(head.value) + '  ' * position_multiplier)
            else:
                print(position_multiplier * '  ' + str(head.value) + '  ' * position_multiplier)
        if head.right is not None:
            SortedLinkedList.all_node(head.right, 'right', position_multiplier)
        elif head.left is not None:
            SortedLinkedList.all_node(head.left, 'left', position_multiplier)
        elif head.center:
            if position == 'left':
                position_multiplier -= 1
            elif position == 'right':
                position_multiplier += 1
            SortedLinkedList.all_node(head.center, 'center', position_multiplier)


if __name__ == '__main__':
    sortedll = SortedLinkedList()
    sortedll.add(10)
    sortedll.add(11)
    sortedll.add(9)
    sortedll.add(1)
    sortedll.add(2)
    sortedll.add(100)
    sortedll.add(101)
    sortedll.add(103)
    sortedll.add(103)
    sortedll.add(-3)
    sortedll.add(-3)
    sortedll.add(5)
    sortedll.add(4)
    sortedll.add(3)
    sortedll.add(3)
    SortedLinkedList.all_node(sortedll.head)
